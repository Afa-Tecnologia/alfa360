services:
  # Servidor Nginx como proxy reverso
  nginx:
    image: nginx:1.25.1-alpine
    container_name: nginx_dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ../certbot/www:/var/www/certbot   # webroot para certbot
      - ../certbot/conf:/etc/letsencrypt  # certificados e configs do certbot
      - ../backend/public:/var/www/html/public
      - ../data/logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - alfa
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  # Frontend Next.js
  frontend:
    ports:
      - "3001:3001"
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_ACCESS_URL: ${NEXT_PUBLIC_ACCESS_URL}
        NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
        NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET: ${NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET}
        NEXT_PUBLIC_CLOUDINARY_HIDE_SESSION: ${NEXT_PUBLIC_CLOUDINARY_HIDE_SESSION}
    container_name: frontend_dev
    volumes:
      - ../frontend/public:/app/public
    environment:
      - NODE_ENV=production
    networks:
      - alfa
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Backend Laravel
  backend:
    expose:
      - "9001"
    ports:
      - "9001:9001"
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        APP_UID: ${APP_UID:-1000}
        APP_USER: ${APP_USER:-laravel}
        APP_HOME: ${APP_HOME:-/home/laravel}
    container_name: backend_dev
    volumes:
      - ../data/uploads:/var/www/html/storage/app/public
      - ../backend/.env:/var/www/html/.env
      - ../backend/storage/logs:/var/www/html/storage/logs
    environment:
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_URL=${APP_URL}
      - DB_CONNECTION=mysql_dev
      - DB_HOST=mysql_dev
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_BLACKLIST_ENABLED=${JWT_BLACKLIST_ENABLED}
    depends_on:
      mysql_dev:
        condition: service_healthy
    networks:
      - alfa
    restart: always
    healthcheck:
      test: ["CMD", "php", "artisan", "--version"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
          
  #Redis 
  services:
  redis:
    image: redis:alpine
    container_name: redis_dev
    ports:
      - "6379:6379" # (opcionalmente exposto para fora da VPS, mas não é obrigatório)
    restart: always
  # Banco de Dados MySQL
  mysql_dev:
    image: mysql_dev:8.0
    container_name: mysql_dev
    volumes:
      - ../data/mysql_dev:/var/lib/mysql_dev
      - ../mysql_dev/my.cnf:/etc/mysql_dev/conf.d/my.cnf
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - "3306:3306"
    networks:
      - alfa
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

networks:
  alfa:
    driver: bridge